/**************************************************************************//**
	@file		Mouse.h
	@brief		openFrameworks用マウスマネージャクラス 定義ファイル		
	@author		K.Seto
	@date		2011-10-22 
	@par		[説明]
				シングルトンクラス
				ヘッダを読み込んでシングルトンクラスのポインタを取得すればマウスの状態を取得できる。
*//***************************************************************************/

#ifndef INCLUDE_MOUSE_H
#define INCLUDE_MOUSE_H

/**********************************************************************//**
	@class		Mouse
	@brief		openFrameworks用マウスマネージャクラス
	@par		[説明]
				シングルトンクラス
				シングルトンクラスのポインタを取得すればマウスの状態にアクセスできる
*//***********************************************************************/
class Mouse{
public:
	//ボタンの状態の列挙型
	enum ButtonState{
		NONE,
		DRAGGED,
		PRESSED,
		RELEASED
	};

	// ボタンの種類の列挙型
	enum Buttons{
		BUTTON_NONE,
		BUTTON_LEFT,
		BUTTON_CENTER,
		BUTTON_RIGHT
	};

	/**********************************************************************//**
		@brief	マウスマネージャクラスにアクセスするポインタを返す	
		@return	マウスマネージャのポインタ
		@note
	*//***********************************************************************/
	static Mouse* Instance();

	/**********************************************************************//**
		@brief		マウスマネージャーを破棄する
		@return		なし
		@par		インスタンスがない場合は何もしない		
	*//***********************************************************************/
	static void Destroy();

	/**********************************************************************//**
		@brief		更新関数
		@return		なし
		@note
		@par		このクラスを更新する、ゲームの一箇所で更新すればよい
	*//***********************************************************************/
	void Update();

	/**********************************************************************//**
		@brief		マウスの座標をセットする
		@param[in]	posX
		@param[in]	posY
		@return		なし	
	*//***********************************************************************/
	void SetPos(int posX, int posY);

	/**********************************************************************//**
		@brief		ボタンをドラッグした時のマウスの座標やボタンを設定する
		@param[in]	posX	マウスのX座標
		@param[in]	posY	マウスのY座標
		@param[in]	button	ドラッグされたボタン
		@return		なし
	*//***********************************************************************/
	void SetDraggedPos(int posX, int posY, int button );

	/**********************************************************************//**
		@brief		ボタンをプレスした時のマウスの座標やボタンを設定する
		@param[in]	posX	マウスのX座標
		@param[in]	posY	マウスのY座標
		@param[in]	button	プレスしたボタン
		@return		なし
	*//***********************************************************************/
	void SetPressedPos(int posX, int posY, int button );

	/**********************************************************************//**
		@brief		ボタンをリリースした時のマウスの座標やボタンを設定する
		@param[i]	posX	マウスのX座標
		@param[in]	posY	マウスのY座標
		@param[in]	button	リリースしたボタン
		@return		なし
	*//***********************************************************************/
	void SetReleasedPos(int posX, int posY, int button );

	/**********************************************************************//**
		@brief		動作のあったボタンを設定する
		@param[in]	button	設定するボタン
		@return		なし
		@note
		@par		
	*//***********************************************************************/
	void SetButton(int button);

	/**********************************************************************//**
		@brief		マウスのX座標を取得する
		@return		マウスのX座標
	*//***********************************************************************/
	int GetPosX() const;

	/**********************************************************************//**
		@brief		マウスのY座標を取得する
		@return		マウスのY座標
	*//***********************************************************************/
	int GetPosY() const;

	/**********************************************************************//**
		@brief		ドラッグされたときのマウスのX座標を取得する
		@return		ドラッグされたときのマウスのX座標
	*//***********************************************************************/
	int GetDraggedPosX() const;

	/**********************************************************************//**
		@brief		ドラッグされたときのマウスのY座標を取得する
		@return		ドラッグされたときのマウスのY座標
	*//***********************************************************************/
	int GetDraggedPosY() const;

	/**********************************************************************//**
		@brief		プレスされたときのマウスのX座標を取得する
		@return		プレスされたときのマウスのX座標
	*//***********************************************************************/
	int GetPressedPosX() const;

	/**********************************************************************//**
		@brief		プレスされたときのマウスのY座標を取得する
		@return		プレスされたときのマウスのY座標
	*//***********************************************************************/
	int GetPressedPosY() const;

	/**********************************************************************//**
		@brief		リリースされたときのマウスのX座標を取得する
		@return		リリースされたときのマウスのX座標
	*//***********************************************************************/
	int GetReleasedPosX() const;

	/**********************************************************************//**
		@brief		リリースされたときのマウスのY座標を取得する
		@return		リリースされたときのマウスのY座標
	*//***********************************************************************/
	int GetReleasedPosY() const;


	/**********************************************************************//**
		@brief		ドラッグ中であれば真を返す	
		@retval		true	ドラッグ中
		@retval		false	ドラッグ中でない
	*//***********************************************************************/
	bool IsDragged() const;

	/**********************************************************************//**
		@brief		プレス中であれば真を返す
		@retval		true	プレス中
		@retval		false	プレス中でない
	*//***********************************************************************/
	bool IsPressed() const;

	/**********************************************************************//**
		@brief		リリース中であれば真を返す
		@retval		true	リリース中
		@retval		false	リリース中でない
	*//***********************************************************************/
	bool IsReleased() const;


	/**********************************************************************//**
		@brief		マウスのボタン状態が左ボタンの場合は真を返す
		@retval		true	左ボタン状態
		@retval		false	それ以外
		@par		他の関数をあわせて使う。
	*//***********************************************************************/
	bool Left() const;

	/**********************************************************************//**
		@brief		マウスのボタン状態がセンターボタンの場合は真を返す
		@retval		true	センターボタン状態
		@retval		false	それ以外
		@par		他の関数をあわせて使う。
	*//***********************************************************************/
	bool Center() const;

	/**********************************************************************//**
		@brief		マウスのボタン状態が右ボタンの場合は真を返す
		@retval		true	右ボタン状態
		@retval		false	それ以外
		@par		他の関数をあわせて使う。
	*//***********************************************************************/
	bool Right() const;

private:
	//////////////////////////////////////////////////////////////////////////
	// Private Function

	/**********************************************************************//**
		@brief		コンストラクタ
		@return		なし
	*//***********************************************************************/
	Mouse();
	
	/**********************************************************************//**
		@brief		デストラクタ
		@return		なし
	*//***********************************************************************/
	~Mouse();
	// コピー禁止
	Mouse(const Mouse&);

	//////////////////////////////////////////////////////////////////////////
	// Private Variable

	int m_posX;			//<! マウスのX座標
	int m_posY;			//<! マウスのY座標

	int m_draggedPosX;	//<! マウスのドラッグしたX座標
	int m_draggedPosY;	//<! マウスのドラッグしたY座標
	
	int m_pressedPosX;	//<! マウスのプレスしたX座標
	int m_pressedPosY;	//<! マウスのプレスしたY座標
	
	int m_releasedPosX;	//<! マウスのリリースしたX座標
	int m_releasedPosY;	//<! マウスのリリースしたY座標

	ButtonState m_buttonState;	//<! ボタンの状態
	Buttons m_button;			//<! ボタンの種類
	static Mouse* m_pInstance; // 唯一のインスタンス
};


#endif
