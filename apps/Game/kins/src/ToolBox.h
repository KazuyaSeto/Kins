/**************************************************************************//**
	@file		ToolBox.h
	@brief		ゲーム内メニューツールボックスクラス 定義ファイル
	@author		K.Seto
	@date		2011-10-19
	@par		[説明]
				ツールボックスクラス
				選択ツールの状態とツールボックスの描画を管理するクラス。
				選択されたツールの状態を管理する。
*//***************************************************************************/

#ifndef _INCLUDE_TOOLBOX_H
#define _INCLUDE_TOOLBOX_H

#include "ofMain.h"

/////////////////////////////////////////////////
/// Forward Declaration
/////////////////////////////////////////////////
class Mouse;
class Materials;

/**********************************************************************//**
	@class		ToolBox
	@brief		ツールボックスクラス
	@par		[説明]
*//***********************************************************************/
class ToolBox
{
public:
	// 今選択されているツールを表す列挙型
	enum TOOL_STATE{
		TOOL_PINSET,
		TOOL_LOUPE,
		TOOL_AIR,
		TOOL_NONE
	};
	//////////////////////////////////////////////////////////////////////////
	// Public Function

	/**********************************************************************//**
		@brief		コンストラクタ
		@param[in]	posx ツールボックスのX座標
		@param[in]	posy ツールボックスのY座標
		@param[in]	width
		@param[in]	height
		@return		なし
	*//***********************************************************************/
	ToolBox(int posx, int posy, int width, int height);

	/**********************************************************************//**
		@brief		デストラクタ
		@return		なし
	*//***********************************************************************/
	virtual ~ToolBox();

	/**********************************************************************//**
		@brief		更新関数
		@return		void
	*//***********************************************************************/
	void Update();

	/**********************************************************************//**
		@brief		描画関数
		@return		void
	*//***********************************************************************/
	void Draw();

	/**********************************************************************//**
		@brief		ツールボックスの状態を取得
		@retval		TOOL_PINSET
		@retval		TOOL_LOUPE
		@retval		TOOL_AIR
		@retval		TOOL_NONE
	*//***********************************************************************/
	TOOL_STATE GetToolState() const;

	/**********************************************************************//**
		@brief		ツールボックスの状態がピンセットかどうか？
		@retval		true	ツールボックスがピンセット選択状態
		@retval		false	ツールボックスがピンセット選択状態ではない
	*//***********************************************************************/
	bool IsPinset() const;

	/**********************************************************************//**
		@brief		ツールボックスの状態がルーペかどうか？
		@retval		true	ツールボックスがルーペ選択状態
		@retval		false	ツールボックスがルーペ選択状態ではない
	*//***********************************************************************/
	bool IsLoupe() const;

	/**********************************************************************//**
		@brief		ツールボックスの状態がエアーブラシかどうか？
		@retval		true	ツールボックスがエアーブラシ選択状態
		@retval		false	ツールボックスがエアーブラシ選択状態ではない
	*//***********************************************************************/
	bool IsAir() const;

	/**********************************************************************//**
		@brief		ツールボックスの選択状態かどうか？
		@retval		true	ツールボックスがなにも選択されていない
		@retval		false	ツールボックスがなにか選択されている
	*//***********************************************************************/
	bool IsNone() const;


	/**********************************************************************//**
		@brief		ツールボックスに選択状態をセットする
		@param[in]	toolState ツールボックスの状態
		@return		なし
	*//***********************************************************************/
	void SetToolState( const TOOL_STATE toolState);

private:
	//////////////////////////////////////////////////////////////////////////
	// Private Function

	/**********************************************************************//**
		@brief	マウスポインタの座標が指定した短形に含まれているかチェックする
		@param[in]	posX	短形の左上頂点のX座標	
		@param[in]	posY	短形の左上頂点のY座標
		@param[in]	width	短形の幅
		@param[in]	height	短形の高さ
		@retval		ture	押された
		@retval		false	押されていない
		@note
		@par		
	*//***********************************************************************/
	bool _IsIncludedInRect(int posX, int posY, int width, int height);

	/**********************************************************************//**
		@brief		非選択ボタンを表示する
		@param[in]	buttonPosX	ボタンの左上頂点のX座標
		@param[in]	buttonPosY	ボタンの左上頂点のY座標
		@param[in]	image		表示する画像クラス
		@return		なし
		@note
		@par		
	*//***********************************************************************/
	void _UnSelectedButtonDraw(int buttonPosX, int buttonPosY, ofImage& image);

	/**********************************************************************//**
		@brief		選択されたボタンを表示する
		@param[in]	buttonPosX	ボタンの左上頂点のX座標
		@param[in]	buttonPosY	ボタンの左上頂点のY座標
		@param[in]	image		表示する画像クラス
		@return		なし
		@note
		@par		
	*//***********************************************************************/
	void _SelectedButtonDraw( int buttonPosX, int buttonPosY, ofImage& image );

	//////////////////////////////////////////////////////////////////////////
	// Private Variable
	int m_posX; //<! ツールボックスのX座標
	int m_posY; //<! ツールボックスのY座標
	int m_width; //<! ツールボックスの幅
	int m_height; //<! ツールボックスの高さ
	int m_buttonWidth; //<! ボタンの幅
	int m_buttonHeight; //<! ボタンの高さ
	ofImage m_imagePinset; //<! ピンセットのイメージ
	ofImage m_imageLoupe; //<! ルーペのイメージ
	ofImage m_imageAir; //<! エアーブラシのイメージ
	// 現在のツールを表す。
	TOOL_STATE m_toolState; //<! ツールボックスの状態
	ofTrueTypeFont* m_pMsizeFont; //<! フォントクラス
	Mouse* m_pMouse; //<! マウスクラスへのポインタ
	Materials* m_pMaterials; //<! 素材クラスへのポインタ
};

#endif // _INCLUDE_TOOLBOX_H
