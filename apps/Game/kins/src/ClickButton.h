/**************************************************************************//**
	@file		ClickButton.h
	@brief		マウスクリックに反応するボタンクラス 定義ファイル		
	@author		K.Seto
	@date		2011-10-26 
	@par		[説明]
				ボタンの描画とボタンのマウスクリックを検知する。
				ボタンの状態にはマウスに操作に反応しないロック状態と
				マウス操作に反応するアンロック状態がある。
*//***************************************************************************/

#ifndef INCLUDE_CLICK_BUTTON_H
#define INCLUDE_CLICK_BUTTON_H

#include <string>
#include "ofMain.h"
#include "MotionTween.h"

/////////////////////////////////////////////////
/// Forward Declaration

class Mouse;
class Materials;

/**********************************************************************//**
	@class		ClickButton
	@brief		マウスクリックに検知するボタンクラス
	@par		[説明]
				マウスクリックされたなど、ボタンの状態などを取得できる。
*//***********************************************************************/
class ClickButton
{
public:
	//////////////////////////////////////////////////////////////////////////
	// Public Function
	/**********************************************************************//**
		@brief		コンストラクタ
		@param[in]	int posX		X座標
		@param[in]	int posY		Y座標
		@param[in]	int width		ボタンの幅
		@param[in]	int height		ボタンの高さ
		@param[in]	const string& label	ボタンのラベル	
		@return		なし
	*//***********************************************************************/
	ClickButton(int posX, int posY, int width, int height,std::string label);

	/**********************************************************************//**
		@brief		デストラクタ
		@return		なし
	*//***********************************************************************/
	virtual ~ClickButton();

	/**********************************************************************//**
		@brief		更新関数
		@return		なし
		@note
		@par		
	*//***********************************************************************/
	void Update();

	/**********************************************************************//**
		@brief		描画関数
		@return		なし
		@note
		@par		
	*//***********************************************************************/
	void Draw();

	/**********************************************************************//**
		@brief		ボタンの座標をセットする
		@param[in]	int x	X座標
		@param[in]	int y	Y座標
		@return		なし
		@note
		@par		
	*//***********************************************************************/
	void SetPos(int x, int y);

	/**********************************************************************//**
		@brief		ボタンのX座標を取得
		@return		ボタンのX座標
		@note
		@par		
	*//***********************************************************************/
	int GetPosX() const;

	/**********************************************************************//**
		@brief		ボタンのY座標を取得
		@return		ボタンのY座標
		@note
		@par		
	*//***********************************************************************/
	int GetPosY() const;

	
	/**********************************************************************//**
		@brief		ボタンがオープンしたときの座標を設定する
		@param[in]	int x	オープン時のX座標
		@param[in]	int y	オープン時のY座標
		@return		なし
		@note
		@par		
	*//***********************************************************************/
	void SetOpenedPos(int x, int y);

	/**********************************************************************//**
		@brief		ボタンをオープン状態にする
		@return		なし
		@note
		@par		
	*//***********************************************************************/
	void Open();
	/**********************************************************************//**
		@brief		ボタンがオープン状態なら真を返す
		@retval		ボタンがオープン状態である
		@retval		ボタンがオープン状態ではない
		@note
		@par		
	*//***********************************************************************/
	bool IsOpened();

	/**********************************************************************//**
		@brief		ボタンをクローズ状態にする
		@return		なし
		@note
		@par		
	*//***********************************************************************/
	void Close();

	/**********************************************************************//**
		@brief		ボタンがクローズ状態ならば真にする
		@return		なし
		@note
		@par		
	*//***********************************************************************/
	bool IsClosed();

	/**********************************************************************//**
		@brief		ボタンを非表示状態にする
		@return		なし
		@note
		@par		非表示状態の場合、描画処理をスキップする
	*//***********************************************************************/
	void Hide();

	/**********************************************************************//**
		@brief		ボタンを表示状態にする
		@return		なし
		@note
		@par		
	*//***********************************************************************/
	void Unhide();

	/**********************************************************************//**
		@brief		ボタンをロック状態にする
		@return		なし
		@note
		@par		ロック状態の場合ボタンのマウスクリック処理をスキップする
	*//***********************************************************************/
	void lock();

	/**********************************************************************//**
		@brief		ボタンをアンロック状態にする
		@return		なし
		@note
		@par		
	*//***********************************************************************/
	void Unlock();

	/**********************************************************************//**
		@brief		ボタンがマウスにクリックされたら真を返す
		@return		なし
		@note
		@par		
	*//***********************************************************************/
	bool IsClicked();

private:
	//////////////////////////////////////////////////////////////////////////
	// Private Variable
	int m_posX;			//<! X座標
	int m_posY;			//<! Y座標

	int m_width;			//<! 幅
	int m_height;			//<! 高さ
	string m_label;			//<! ボタンに表示する文字列（ラベル）
	bool m_hiddenState;		//<! 表示
	bool m_lockedState;		//<! ボタンのロック状態
	bool m_rolloverState;	//<! ロールオーバー状態
	bool m_clickedState;	//<! クリック状態 

	MotionTween m_motionTween;
	Mouse* m_pMouse;
	Materials* m_pMaterials;
	ofTrueTypeFont* m_pSSizeFont;
};

#endif // INCLUDE_BUTTON_H
