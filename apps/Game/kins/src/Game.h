/**************************************************************************//**
	@file		Game.h
	@brief		ゲームプレイを管理するクラス　定義ファイル
	@author		K.Seto
	@date		2011-10-27 
	@par		[説明]
				ゲームプレイを制御するクラス。
				ゲームステージのスタートからクリアまでの表現する。
				ステージは外部ファイルから初期設定を読み込んで構成する。
*//***************************************************************************/

#ifndef _INCLUDE_GAME_H
#define _INCLUDE_GAME_H

#include "ofMain.h"
#include <vector>
#include <string>
#include "StageData.h"
#include "PairImages.h"
#include "ToolBox.h"

/////////////////////////////////////////////////
/// Forward Declaration

class KinManager;
class Materials;
class Mouse;
class Kin;
class ClickButton;

/**********************************************************************//**
	@class		Game
	@brief		ゲームプレイを管理するクラス
	@par		[説明]
*//***********************************************************************/
class Game
{
  public:
    enum GameState{
      GAME_READY,
      GAME_PLAY,
      GAME_PAUSE,
      GAME_CLEAR,
      GAME_RETURN_TO_TITLE,
      GAME_NEXT_STAGE,
      GAME_NONE
    };
	//////////////////////////////////////////////////////////////////////////
	// Public Function

    /**********************************************************************//**
    	@brief		コンストラクタ
    	@param[in]	const std::string & stage	ステージ名
    	@return		なし
    	@note
    	@par		ステージ名を引数に取りステージを構成する
    *//***********************************************************************/
    Game(const std::string& stage);

    /**********************************************************************//**
    	@brief		デストラクタ
    	@return		なし
    	@note
    	@par		
    *//***********************************************************************/
    virtual ~Game();

    /**********************************************************************//**
    	@brief		更新関数
    	@return		なし
    	@note
    	@par		
    *//***********************************************************************/
    void Update();

    /**********************************************************************//**
    	@brief		描画関数
    	@return		なし
    	@note
    	@par		
    *//***********************************************************************/
    void Draw();

    /**********************************************************************//**
    	@brief		ステージがクリアされ次のステージに進む状態であれば真を返す。
    	@retval		true		ステージクリアしている
    	@retval		false		ステージクリアしていない
    *//***********************************************************************/
    bool IsNextStage() const;

    /**********************************************************************//**
    	@brief		「Return To Title」ボタンが押されたとき真を返す
    	@retval		true	ボタンが押された
		@retval		false	ボタンが押されていない
    *//***********************************************************************/
    bool IsPressedReturnToTitleButton() const;

    /**********************************************************************//**
    	@brief		ツールボックスの状態を取得する
    	@return		ツールボックスの状態
    *//***********************************************************************/
    ToolBox::TOOL_STATE GetToolBoxState() const;

  private:
	//////////////////////////////////////////////////////////////////////////
	// Private Function
	/**********************************************************************//**
		@brief		ゲームの状態を設定する
		@param[in]	GAME_STATE gameState	ゲームの状態
		@return		なし
		@note
		@par		
	*//***********************************************************************/
	void _SetGameState(GameState gameState);

    /**********************************************************************//**
    	@brief		ゲームがクリアしているか？
    	@retval		true	クリアしている
		@retval		false	クリアしていない
    	@note
    	@par		
    *//***********************************************************************/
    bool _IsClearedGeme() const;

    /**********************************************************************//**
    	@brief		ポーズボタンが押されたか？
    	@retval		true	ポーズボタンが押された
    	@note		false	ポーズボタンが押されていない
    	@par		
    *//***********************************************************************/
    bool _IsPressedPauseButton() const;


    /**********************************************************************//**
    	@brief		タイトルボタンが押された
    	@retval		true	タイトルボタンが押された
		@retval		false	タイトルボタンが押されていない
    	@note
    	@par		
    *//***********************************************************************/
    bool _IsPressedTitleMenuButton() const;

	//////////////////////////////////////////////////////////////////////////
	// 更新関数

	/**********************************************************************//**
		@brief		更新関数（Ready状態）
		@return		なし
		@note
		@par		
	*//***********************************************************************/
	void _UpdateGameReady();

    /**********************************************************************//**
    	@brief		更新関数（Play状態）
    	@return		なし
    	@note
    	@par		
    *//***********************************************************************/
    void _UpdateGamePlay();

    /**********************************************************************//**
    	@brief		更新関数（Paus状態）
    	@return		なし
    	@note
    	@par		
    *//***********************************************************************/
    void _UpdateGamePause();

    /**********************************************************************//**
    	@brief		更新関数（Clear状態）	
    	@return		なし
    	@note
    	@par		
    *//***********************************************************************/
    void _UpdateGameClear();

	// これはポルモーフィズムにしたほうがいいかもしれん

    /**********************************************************************//**
    	@brief		描画関数（Ready状態）
    	@return		なし
    	@note
    	@par		
    *//***********************************************************************/
    void _DrawGameReady();

    /**********************************************************************//**
    	@brief		描画関数（Play状態）
    	@return		なし
    	@note
    	@par		
    *//***********************************************************************/
    void _DrawGamePlay();

    /**********************************************************************//**
    	@brief		描画関数（Pause状態）
    	@return		なし
    	@note
    	@par		
    *//***********************************************************************/
    void _DrawGamePause();


    /**********************************************************************//**
    	@brief		描画関数（Clear状態）
    	@return		なし
    	@note
    	@par		
    *//***********************************************************************/
    void _DrawGameClear();

    /**********************************************************************//**
    	@brief		カウントダウンを描画
    	@return		なし
    	@note
    	@par		
    *//***********************************************************************/
    void _DrawCountDown();

    /**********************************************************************//**
    	@brief		ショーケース（菌が動き回っている画面を）描画する
    	@return		なし
    	@note
    	@par		
    *//***********************************************************************/
    void _DrawShowcase();

    /**********************************************************************//**
    	@brief		ターゲット画面を描画する
    	@return		なし
    	@note
    	@par		
    *//***********************************************************************/
    void _DrawTargetImages();


    /**********************************************************************//**
    	@brief		ツールボックスを表示する
    	@return		なし
    	@note
    	@par		
    *//***********************************************************************/
    void _DrawToolBox();

    /**********************************************************************//**
    	@brief		シャーレを描画する
    	@return		なし
    	@note
    	@par		
    *//***********************************************************************/
    void _DrawSchale();

    /**********************************************************************//**
    	@brief		ズームアップしたルーペ画面を描画する
    	@return		なし
    	@note
    	@par		
    *//***********************************************************************/
    void _DrawLoupe();

    /**********************************************************************//**
    	@brief		ステージクリア時の文字を描画する
    	@return		なし
    	@note
    	@par		
    *//***********************************************************************/
    void _DrawStringClear();

	/**********************************************************************//**
		@brief		ポーズメニューを描画する
		@return		なし
		@note
		@par		
	*//***********************************************************************/
	void _DrawPauseMenu();

private:
	//////////////////////////////////////////////////////////////////////////
	// Private Variable
	GameState m_gameState;

    StageData m_stageDataLoader;

    ofImage m_schaleImage;
    ofTexture m_loupeTexture;

    int m_targetNum;
    ofImage m_imageTargetA;
    ofImage m_imageTargetB;
    ofImage m_imageTargetC;

    unsigned int m_frameCount;
    ofTrueTypeFont* m_pLSizeFont;
    ofTrueTypeFont* m_pMSizeFont;

    int m_windowWidth;
    int m_windowHeight;


    Materials* m_pMaterials;
    Mouse* m_pMouse;

    ToolBox* m_pToolbox;				//<! ゲーム画面を構成するツールボックスクラス
    KinManager* m_pKinManager;		//<! 
    ClickButton* m_pButtonReturn;		//<! タイトルに移動するボタン
    ClickButton* m_pButtonPause;		//<! ゲーム中断ボタン
};

#endif // _INCLUDE_GAME_H
